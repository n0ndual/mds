* Introduction
** for decades, computer systems have relied on the same block-based interface to storage devices: reading and writing data from and to fixed-size sectors.
** However, hard disk performance has remained stubbornly poor, hampering efforts to improve performance by rethinking the storage interface .
** for instance, an SSD can support complex atomic operations, native caching operations, a large sparse storage address space, delegating storage allocation decisions to the SSD, and offloading file system permission checks to hardware. these new interfaces allow applications to leverage SSD's low latency, ample internal bandwidth, and on-board computational resources, and they can lead to huge improvements in performance.
** although these features are useful, the current one-at-time approach to implementing them suffers from several limitations.
*** First, adding feature is complex and requires access to SSD internals, so only the SSD manufacturer can add them.
*** Second, the code must be trusted, since it can access or destroy any of the data in the SSD.
*** Third, to be cost-effective for manufacturers to develop, market, and maintain, the new features must be useful to many users and/or across many applications.
** To overcome the limitations, we propose to make programmability a central feature of the SSD interface. So ordinary programmers can safely extend their SSD's functionality. The resulting system, called Willow, will allow application, file system, and operating system programmers to install customized SSD Apps that can modify and extend the SSD's behavior.
** applications will be able to exploit this kind of programmability in (at least) four different ways.
*** data-dependent logic
*** semantic extensions
*** privileged execution
*** data intensive computations
